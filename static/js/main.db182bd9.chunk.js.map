{"version":3,"sources":["components/SpeedSlider.js","components/CellSizeSlider.js","components/Rules.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["SpeedSlider","props","handleChange","event","isRunning","setDelay","target","value","state","delay","this","style","flexBasis","opacity","className","id","name","type","min","max","step","onChange","Component","CellSizeSlider","setCellSize","cellSize","Rules","class","About","href","neighborCells","App","newGrid","rows","i","rowCount","push","Array","from","colCount","useState","generation","setGeneration","grid","setGrid","setIsRunning","wrapAround","setWrapAround","running","useRef","current","gen","updateGen","newGen","newGeneration","produce","draftGrid","j","liveNeighbors","forEach","x","y","neighborI","neighborJ","randomGrid","Math","random","createRandomGrid","gridTemplateColumns","width","map","col","key","onClick","nextGrid","height","runSimulation","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db182bd9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nexport default class SpeedSlider extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            delay: props.delay\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        if (!this.props.isRunning) {\r\n            this.props.setDelay(event.target.value)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { delay } = this.state\r\n        return (\r\n            <label style={{flexBasis: '20%', opacity: this.props.isRunning ? '0.6' : ''}}>Delay:\r\n                <input\r\n                    className='range'\r\n                    id='delay'\r\n                    name='delay'\r\n                    type='range'\r\n                    // defaultValue={delay}\r\n                    value={this.props.delay}\r\n                    min={50}\r\n                    max={2000}\r\n                    step={50}\r\n                    onChange={this.handleChange}\r\n                />\r\n            </label>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class CellSizeSlider extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cellSize: props.cellSize\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        if (!this.props.isRunning) {\r\n            this.props.setCellSize(event.target.value)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // let { cellSize } = this.state\r\n        return (\r\n            <label style={{flexBasis: \"20%\", opacity: this.props.isRunning ? '0.6' : ''}}>Cell Size:\r\n                <input\r\n                    className='range'\r\n                    id='delay'\r\n                    name='delay'\r\n                    type='range'\r\n                    // defaultValue={delay}\r\n                    value={this.props.cellSize}\r\n                    min={5}\r\n                    max={25}\r\n                    step={1}\r\n                    onChange={this.handleChange}\r\n\r\n                />\r\n            </label>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default function Rules() {\r\n    return (\r\n        <div class='rules'>\r\n            <h2>Rules</h2>\r\n            <ul>\r\n                <li>Any live cell with fewer than two live neighbors dies, as if by underpopulation.</li>\r\n                <li>Any live cell with two or three live neighbors lives on to the next generation.</li>\r\n                <li>Any live cell with more than three live neighbors dies, as if by overpopulation.</li>\r\n                <li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div className='about'>\r\n            <h2>About this Algorithm</h2>\r\n            <p>The <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Game of Life</a> is a zero-player game created by British mathematician John Conway. It is a cellular automaton which produces wildly varying outcomes based on changes to the initial state, all based on a small set of simple rules. Conway's Game of Life is turing complete, which means that a sufficiently large enough grid may perform the same calculations of which computers are capable using a number of <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Examples_of_patterns\">emergent patterns.</a></p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useRef, useCallback } from 'react';\r\nimport produce from 'immer';\r\nimport './App.css';\r\nimport SpeedSlider from './components/SpeedSlider';\r\nimport CellSizeSlider from './components/CellSizeSlider';\r\nimport Rules from './components/Rules';\r\nimport About from './components/About';\r\n\r\nconst neighborCells = [\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [-1, 1],\r\n  [0, -1],\r\n  [0, 1],\r\n  [1, -1],\r\n  [1, 0],\r\n  [1, 1]\r\n]\r\n\r\nfunction App() {\r\n  const newGrid = () => {\r\n    const rows = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n      rows.push(Array.from(Array(colCount), () => 0))\r\n    }\r\n    return rows\r\n  }\r\n\r\n  const createRandomGrid = () => {\r\n    const rows = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n      rows.push(Array.from(Array(colCount), () => {\r\n        return Math.random() > .7 ? 1 : 0\r\n      }))\r\n    }\r\n    return rows\r\n  }\r\n\r\n  const activeClass = (value) => {\r\n    return value ? 'alive' : 'dead'\r\n  }\r\n\r\n  const [rowCount, setRowCount] = useState(50);\r\n  const [colCount, setColCount] = useState(100);\r\n  const [delay, setDelay] = useState(50);\r\n  const [generation, setGeneration] = useState(0);\r\n  const [grid, setGrid] = useState(newGrid());\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [cellSize, setCellSize] = useState(10);\r\n  const [wrapAround, setWrapAround] = useState(true);\r\n\r\n  const running = useRef(isRunning);\r\n  running.current = isRunning;\r\n  const gen = useRef(generation);\r\n  gen.current = generation;\r\n\r\n  const updateGen = () => {\r\n    let newGen = gen.current + 1\r\n    setGeneration(newGen)\r\n  }\r\n  \r\n  const newGeneration = () => {\r\n    setGrid(grid => {\r\n      return produce(grid, draftGrid => {\r\n        for (let i = 0; i < rowCount; i++) {\r\n          for (let j = 0; j < colCount; j++) {\r\n            let liveNeighbors = 0;\r\n            neighborCells.forEach(([x, y]) => {\r\n              let neighborI = i + x;\r\n              let neighborJ = j + y;\r\n              if (wrapAround) {\r\n                if (neighborI < 0) {\r\n                  neighborI = rowCount + neighborI\r\n                }\r\n                if (neighborI === rowCount) {\r\n                  neighborI = 0\r\n                }\r\n                if (neighborJ < 0) {\r\n                  neighborJ = colCount + neighborJ\r\n                }\r\n                if (neighborJ === colCount) {\r\n                  neighborJ = 0\r\n                }\r\n                liveNeighbors += grid[neighborI][neighborJ]\r\n              } else if (neighborI >= 0 && neighborI < rowCount && neighborJ >= 0 && neighborJ < colCount) {\r\n                liveNeighbors += grid[neighborI][neighborJ]\r\n              }\r\n            })\r\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\r\n              draftGrid[i][j] = 0;\r\n            } else if (grid[i][j] === 0 && liveNeighbors === 3) {\r\n              draftGrid[i][j] = 1;\r\n            }\r\n          }\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  const runSimulation = () => {\r\n    newGeneration();\r\n    if (!running.current) {\r\n      return\r\n    }\r\n    updateGen();\r\n    setTimeout(runSimulation, delay)\r\n  }\r\n\r\n  const stepGeneration = () => {\r\n    if (!isRunning) {\r\n      newGeneration()\r\n      updateGen()\r\n    }\r\n  }\r\n\r\n  const randomGrid = () => {\r\n    if (!isRunning) {\r\n      setGrid(createRandomGrid());\r\n      setGeneration(0);\r\n    }\r\n  }\r\n\r\n  const clearGrid = () => {\r\n    if (!isRunning) {\r\n      setGrid(newGrid());\r\n      setGeneration(0);\r\n    }\r\n  }\r\n\r\n  const toggleWrap = () => {\r\n    if (!isRunning) {\r\n      setWrapAround(!wrapAround)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Conway's Game of Life</h1>\r\n      <div className='grid' style={{gridTemplateColumns: `repeat(${colCount}, ${cellSize}px)`,\r\n        width: colCount * cellSize\r\n      }}>\r\n        {grid.map((rows, i) =>\r\n          rows.map((col, j) => \r\n            <div\r\n              key={`r${i}c${j}`}\r\n              className={`cell ${activeClass(grid[i][j])}`}\r\n              onClick={() => {\r\n                if (!isRunning) {\r\n                  const nextGrid = produce(grid, draftGrid => {\r\n                    draftGrid[i][j] = grid[i][j] ? 0 : 1\r\n                  })\r\n                  setGrid(nextGrid)\r\n\r\n                }\r\n              }}\r\n              style={{height: `${cellSize}px`, width: `${cellSize}px`}}\r\n              />\r\n              ))}\r\n      </div>\r\n      <h3>Generation: {generation}</h3>\r\n      <div class='controls'>\r\n        <button onClick={() => {\r\n          setIsRunning(!isRunning)\r\n          if (!isRunning) {\r\n            running.current = true;\r\n            runSimulation()\r\n          }\r\n          }}>{isRunning ? 'Stop' : 'Start'}</button>\r\n          <button\r\n            style={{opacity: isRunning ? '0.6' : ''}}\r\n            onClick={() => {\r\n              stepGeneration()\r\n          }}>Step</button>\r\n          <button\r\n            style={{opacity: isRunning ? '0.6' : ''}}\r\n            onClick={() => {\r\n              randomGrid()\r\n            }}\r\n          >Random</button>\r\n          <button\r\n            style={{opacity: isRunning ? '0.6' : ''}}\r\n            onClick={() => {\r\n              clearGrid()\r\n            }}\r\n          >Clear</button>\r\n          <button\r\n            style={{opacity: isRunning ? '0.6' : ''}}\r\n            onClick={() => {\r\n              toggleWrap()\r\n            }}\r\n          >{wrapAround ? 'No Wrap' : 'Wrap'}</button>\r\n        <SpeedSlider delay={delay} setDelay={setDelay} isRunning={isRunning} />\r\n        <CellSizeSlider cellSize={cellSize} setCellSize={setCellSize} isRunning={isRunning} />\r\n      </div>\r\n      <div className='about-section'>\r\n        <Rules />\r\n        <About />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}